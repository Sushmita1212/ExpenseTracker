{"ast":null,"code":"var _jsxFileName = \"E:\\\\sushmita project\\\\udameycode\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  // updating value by using useState by passing 2 variables by destructer,eneteredTitle is initial value which is empty & setEnteredTitle function holds value typed by user in textbox\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = event => {\n    // preventDefault is built into javascript bhaviour,we can prevent the default of this request being sent,since request is not sent the page will not reload beacuse we stay on currently loaded page without sending any request anywhere\n    event.preventDefault(); //we create expenseData object,here we combine all data entered by user,set user enteredtitle into title,into anount,into date\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      // we pass date string into dateObject\n      date: new Date(enteredDate)\n    }; //the value we get on onSaveExpenseDate key will be the function\n\n    props.onSaveExpenseDate(expenseData); // when we submit the form we can set back to empty string by calling setEnteredTitle ,by doing that we can overide what the user entered after form was submited & therefor clear the input\n\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n  }; // ALTERNATIVE APPROACH TO WRITE WHEN WE NEED TO DEPEND ON PREVIOUS STATE OBJECTS & BY using single useState\n  // const [userInput, setUserInput] = useSate({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate:'',\n  // });\n  // const titleChangeHandler = (event) => {\n  //   setUserInput((prevState) => {\n  //     return { ...prevState, enteredTitle: event.target.value};\n  //   });\n  // }\n  // same way implies to other two enteredAmount & enteredDate\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle // we are listening to user input,changes to title input & whenever user types here this function execute & here we get this default event object\n          ,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2021-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancle,\n        children: \"Cancle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["E:/sushmita project/udameycode/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseDate","onCancle"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport './ExpenseForm.css'\r\n\r\nconst ExpenseForm = (props) => {\r\n  // updating value by using useState by passing 2 variables by destructer,eneteredTitle is initial value which is empty & setEnteredTitle function holds value typed by user in textbox\r\n  const [enteredTitle, setEnteredTitle] = useState('')\r\n  const [enteredAmount, setEnteredAmount] = useState('')\r\n  const [enteredDate, setEnteredDate] = useState('')\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value)\r\n  }\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value)\r\n  }\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value)\r\n  }\r\n  const submitHandler = (event) => {\r\n    // preventDefault is built into javascript bhaviour,we can prevent the default of this request being sent,since request is not sent the page will not reload beacuse we stay on currently loaded page without sending any request anywhere\r\n    event.preventDefault()\r\n    //we create expenseData object,here we combine all data entered by user,set user enteredtitle into title,into anount,into date\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      // we pass date string into dateObject\r\n      date: new Date(enteredDate),\r\n    }\r\n    //the value we get on onSaveExpenseDate key will be the function\r\n    props.onSaveExpenseDate(expenseData)\r\n    // when we submit the form we can set back to empty string by calling setEnteredTitle ,by doing that we can overide what the user entered after form was submited & therefor clear the input\r\n    setEnteredTitle('')\r\n    setEnteredAmount('')\r\n    setEnteredDate('')\r\n  }\r\n  // ALTERNATIVE APPROACH TO WRITE WHEN WE NEED TO DEPEND ON PREVIOUS STATE OBJECTS & BY using single useState\r\n  // const [userInput, setUserInput] = useSate({\r\n  //   enteredTitle: '',\r\n  //   enteredAmount: '',\r\n  //   enteredDate:'',\r\n  // });\r\n  // const titleChangeHandler = (event) => {\r\n  //   setUserInput((prevState) => {\r\n  //     return { ...prevState, enteredTitle: event.target.value};\r\n  //   });\r\n  // }\r\n  // same way implies to other two enteredAmount & enteredDate\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className='new-expense__controls'>\r\n        <div className='new-expense__control'>\r\n          <label>Title</label>\r\n          {/* for inputs we just not look after changes but we can pass we value back into input so we can reset or change input programatically by,value: this will set internal value property &we can set it to new value  */}\r\n          <input\r\n            type='text'\r\n            value={enteredTitle}\r\n            // we are listening to user input,changes to title input & whenever user types here this function execute & here we get this default event object\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className='new-expense__control'>\r\n          <label>Amount</label>\r\n          <input\r\n            type='number'\r\n            min='0.01'\r\n            step='0.01'\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className='new-expense__control'>\r\n          <label>Date</label>\r\n          <input\r\n            type='date'\r\n            min='2021-01-01'\r\n            max='2022-12-31'\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='new-expense__actions'>\r\n        {/* when form is submited we also stop editing */}\r\n        <button type='button' onClick={props.onCancle}>\r\n          Cancle\r\n        </button>\r\n        <button type='submit'>Add Expense</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ExpenseForm\r\n"]},"metadata":{},"sourceType":"module"}